{-# LANGUAGE DeriveDataTypeable #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.8.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Product_Types where
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (&&), (||), (==), (++), ($), (-) )

import Control.Exception
import Data.ByteString.Lazy
import Data.Int
import Data.Typeable ( Typeable )
import qualified Data.Map as Map
import qualified Data.Set as Set

import Thrift


data Currency = PLN|GBP  deriving (Show,Eq, Typeable, Ord)
instance Enum Currency where
  fromEnum t = case t of
    PLN -> 1
    GBP -> 2
  toEnum t = case t of
    1 -> PLN
    2 -> GBP
    _ -> throw ThriftException
data Product = Product{f_Product_name :: Maybe String,f_Product_price :: Maybe Double,f_Product_currency :: Maybe Currency,f_Product_tags :: Maybe (Set.Set String)} deriving (Show,Eq,Ord,Typeable)
write_Product oprot record = do
  writeStructBegin oprot "Product"
  case f_Product_name record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("name",T_STRING,1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Product_price record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("price",T_DOUBLE,2)
    writeDouble oprot _v
    writeFieldEnd oprot}
  case f_Product_currency record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("currency",T_I32,3)
    writeI32 oprot (fromIntegral $ fromEnum _v)
    writeFieldEnd oprot}
  case f_Product_tags record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("tags",T_SET,4)
    (let {f [] = return (); f (_viter2:t) = do {writeString oprot _viter2;f t}} in do {writeSetBegin oprot (T_STRING,fromIntegral $ Set.size _v); f (Set.toList _v);writeSetEnd oprot})
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Product_fields iprot record = do
  (_,_t4,_id5) <- readFieldBegin iprot
  if _t4 == T_STOP then return record else
    case _id5 of 
      1 -> if _t4 == T_STRING then do
        s <- readString iprot
        read_Product_fields iprot record{f_Product_name=Just s}
        else do
          skip iprot _t4
          read_Product_fields iprot record
      2 -> if _t4 == T_DOUBLE then do
        s <- readDouble iprot
        read_Product_fields iprot record{f_Product_price=Just s}
        else do
          skip iprot _t4
          read_Product_fields iprot record
      3 -> if _t4 == T_I32 then do
        s <- (do {i <- readI32 iprot; return $ toEnum $ fromIntegral i})
        read_Product_fields iprot record{f_Product_currency=Just s}
        else do
          skip iprot _t4
          read_Product_fields iprot record
      4 -> if _t4 == T_SET then do
        s <- (let {f 0 = return []; f n = do {v <- readString iprot;r <- f (n-1); return $ v:r}} in do {(_etype9,_size6) <- readSetBegin iprot; l <- f _size6; return $ Set.fromList l})
        read_Product_fields iprot record{f_Product_tags=Just s}
        else do
          skip iprot _t4
          read_Product_fields iprot record
      _ -> do
        skip iprot _t4
        readFieldEnd iprot
        read_Product_fields iprot record
read_Product iprot = do
  _ <- readStructBegin iprot
  record <- read_Product_fields iprot (Product{f_Product_name=Nothing,f_Product_price=Nothing,f_Product_currency=Nothing,f_Product_tags=Nothing})
  readStructEnd iprot
  return record
